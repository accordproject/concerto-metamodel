/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */

'use strict';

/**
 * The metamodel itself, as a CTO string
 */
const metaModelCto = "/*\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n@DotNetNamespace(\"AccordProject.Concerto.Metamodel\")\r\nnamespace concerto.metamodel@1.0.0\r\n\r\nconcept Position {\r\n  o Integer line\r\n  o Integer column\r\n  o Integer offset\r\n}\r\n\r\nconcept Range {\r\n  o Position start\r\n  o Position end\r\n  o String source optional\r\n}\r\n\r\nconcept TypeIdentifier {\r\n  o String name\r\n  o String namespace optional\r\n}\r\n\r\nabstract concept DecoratorLiteral {\r\n  o Range location optional\r\n}\r\n\r\nconcept DecoratorString extends DecoratorLiteral {\r\n  o String value\r\n}\r\n\r\nconcept DecoratorNumber extends DecoratorLiteral {\r\n  o Double value\r\n}\r\n\r\nconcept DecoratorBoolean extends DecoratorLiteral {\r\n  o Boolean value\r\n}\r\n\r\nconcept DecoratorTypeReference extends DecoratorLiteral {\r\n  o TypeIdentifier type\r\n  o Boolean isArray default=false\r\n}\r\n\r\nconcept Decorator {\r\n  o String name\r\n  o DecoratorLiteral[] arguments optional\r\n  o Range location optional\r\n}\r\n\r\nconcept Identified {\r\n}\r\n\r\nconcept IdentifiedBy extends Identified {\r\n  o String name\r\n}\r\n\r\nabstract concept Declaration {\r\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\r\n  o Decorator[] decorators optional\r\n  o Range location optional\r\n}\r\n\r\nconcept MapDeclaration extends Declaration {\r\n  o MapKeyType key\r\n  o AggregateValueType value\r\n}\r\n\r\nconcept MapKeyType {\r\n  o TypeIdentifier type\r\n  o Decorator[] decorators optional\r\n  o Range location optional\r\n}\r\n\r\nconcept AggregateValueType {\r\n  o TypeIdentifier type\r\n  o Decorator[] decorators optional\r\n  o Range location optional\r\n}\r\n\r\nconcept AggregateRelationshipValueType extends AggregateValueType {\r\n}\r\n\r\nconcept EnumDeclaration extends Declaration {\r\n  o EnumProperty[] properties\r\n}\r\n\r\nconcept EnumProperty {\r\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\r\n  o Decorator[] decorators optional\r\n  o Range location optional\r\n}\r\n\r\nconcept ConceptDeclaration extends Declaration {\r\n  o Boolean isAbstract default=false\r\n  o Identified identified optional\r\n  o TypeIdentifier superType optional\r\n  o Property[] properties\r\n}\r\n\r\nconcept AssetDeclaration extends ConceptDeclaration {\r\n}\r\n\r\nconcept ParticipantDeclaration extends ConceptDeclaration {\r\n}\r\n\r\nconcept TransactionDeclaration extends ConceptDeclaration {\r\n}\r\n\r\nconcept EventDeclaration extends ConceptDeclaration {\r\n}\r\n\r\nabstract concept Property {\r\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\r\n  o Boolean isArray default=false\r\n  o Boolean isOptional default=false\r\n  o Decorator[] decorators optional\r\n  o Range location optional\r\n}\r\n\r\nconcept RelationshipProperty extends Property {\r\n  o TypeIdentifier type\r\n}\r\n\r\nconcept ObjectProperty extends Property {\r\n  o String defaultValue optional\r\n  o TypeIdentifier type\r\n}\r\n\r\nconcept BooleanProperty extends Property {\r\n  o Boolean defaultValue optional\r\n}\r\n\r\nconcept DateTimeProperty extends Property {\r\n}\r\n\r\nconcept StringProperty extends Property {\r\n  o String defaultValue optional\r\n  o StringRegexValidator validator optional\r\n  o StringLengthValidator lengthValidator optional\r\n}\r\n\r\nconcept StringRegexValidator {\r\n  o String pattern\r\n  o String flags\r\n}\r\n\r\nconcept StringLengthValidator {\r\n  o Integer minLength optional\r\n  o Integer maxLength optional\r\n}\r\n\r\nconcept DoubleProperty extends Property {\r\n  o Double defaultValue optional\r\n  o DoubleDomainValidator validator optional\r\n}\r\n\r\nconcept DoubleDomainValidator {\r\n  o Double lower optional\r\n  o Double upper optional\r\n}\r\n\r\nconcept IntegerProperty extends Property {\r\n  o Integer defaultValue optional\r\n  o IntegerDomainValidator validator optional\r\n}\r\n\r\nconcept IntegerDomainValidator {\r\n  o Integer lower optional\r\n  o Integer upper optional\r\n}\r\n\r\nconcept LongProperty extends Property {\r\n  o Long defaultValue optional\r\n  o LongDomainValidator validator optional\r\n}\r\n\r\nconcept LongDomainValidator {\r\n  o Long lower optional\r\n  o Long upper optional\r\n}\r\n\r\nabstract concept Import {\r\n  o String namespace\r\n  o String uri optional\r\n}\r\n\r\nconcept ImportAll extends Import {\r\n}\r\n\r\nconcept ImportType extends Import {\r\n  o String name\r\n}\r\n\r\nconcept ImportTypes extends Import {\r\n  o String[] types\r\n}\r\n\r\nconcept Model {\r\n  o String namespace\r\n  o String sourceUri optional\r\n  o String concertoVersion optional\r\n  o Import[] imports optional\r\n  o Declaration[] declarations optional\r\n  o Decorator[] decorators optional\r\n}\r\n\r\nconcept Models {\r\n  o Model[] models\r\n}\r\n\r\nabstract concept ScalarDeclaration extends Declaration {\r\n}\r\n\r\nconcept BooleanScalar extends ScalarDeclaration {\r\n  o Boolean defaultValue\r\n}\r\n\r\nconcept IntegerScalar extends ScalarDeclaration {\r\n  o Integer defaultValue optional\r\n  o IntegerDomainValidator validator optional\r\n}\r\n\r\nconcept LongScalar extends ScalarDeclaration {\r\n  o Long defaultValue optional\r\n  o LongDomainValidator validator optional\r\n}\r\n\r\nconcept DoubleScalar extends ScalarDeclaration {\r\n  o Double defaultValue optional\r\n  o DoubleDomainValidator validator optional\r\n}\r\n\r\nconcept StringScalar extends ScalarDeclaration {\r\n  o String defaultValue optional\r\n  o StringRegexValidator validator optional\r\n  o StringLengthValidator lengthValidator optional\r\n}\r\n\r\nconcept DateTimeScalar extends ScalarDeclaration {\r\n  o String defaultValue optional\r\n}\r\n";

module.exports = metaModelCto;
