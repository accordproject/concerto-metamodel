/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */

'use strict';

/**
 * The metamodel itself, as a CTO string
 */
const metaModelCto = "/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@DotNetNamespace(\"AccordProject.Concerto.Metamodel\")\nnamespace concerto.metamodel@1.0.0\n\nconcept Position {\n  o Integer line\n  o Integer column\n  o Integer offset\n}\n\nconcept Range {\n  o Position start\n  o Position end\n  o String source optional\n}\n\nconcept TypeIdentifier {\n  o String name\n  o String namespace optional\n}\n\nabstract concept DecoratorLiteral {\n  o Range location optional\n}\n\nconcept DecoratorString extends DecoratorLiteral {\n  o String value\n}\n\nconcept DecoratorNumber extends DecoratorLiteral {\n  o Double value\n}\n\nconcept DecoratorBoolean extends DecoratorLiteral {\n  o Boolean value\n}\n\nconcept DecoratorTypeReference extends DecoratorLiteral {\n  o TypeIdentifier type\n  o Boolean isArray default=false\n}\n\nconcept Decorator {\n  o String name\n  o DecoratorLiteral[] arguments optional\n  o Range location optional\n}\n\nconcept Identified {\n}\n\nconcept IdentifiedBy extends Identified {\n  o String name\n}\n\nabstract concept Declaration {\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\n  o Decorator[] decorators optional\n  o Range location optional\n}\n\nconcept MapDeclaration extends Declaration {\n  o MapKeyType key\n  o AggregateValueType value\n}\n\nconcept MapKeyType {\n  o TypeIdentifier type\n  o Decorator[] decorators optional\n  o Range location optional\n}\n\nconcept AggregateValueType {\n  o TypeIdentifier type\n  o Decorator[] decorators optional\n  o Range location optional\n}\n\nconcept AggregateRelationshipValueType extends AggregateValueType {\n}\n\nconcept EnumDeclaration extends Declaration {\n  o EnumProperty[] properties\n}\n\nconcept EnumProperty {\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\n  o Decorator[] decorators optional\n  o Range location optional\n}\n\nconcept ConceptDeclaration extends Declaration {\n  o Boolean isAbstract default=false\n  o Identified identified optional\n  o TypeIdentifier superType optional\n  o Property[] properties\n}\n\nconcept AssetDeclaration extends ConceptDeclaration {\n}\n\nconcept ParticipantDeclaration extends ConceptDeclaration {\n}\n\nconcept TransactionDeclaration extends ConceptDeclaration {\n}\n\nconcept EventDeclaration extends ConceptDeclaration {\n}\n\nabstract concept Property {\n  o String name regex=/^(\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4})(?:\\p{Lu}|\\p{Ll}|\\p{Lt}|\\p{Lm}|\\p{Lo}|\\p{Nl}|\\$|_|\\\\u[0-9A-Fa-f]{4}|\\p{Mn}|\\p{Mc}|\\p{Nd}|\\p{Pc}|\\u200C|\\u200D)*$/u\n  o Boolean isArray default=false\n  o Boolean isOptional default=false\n  o Decorator[] decorators optional\n  o Range location optional\n}\n\nconcept RelationshipProperty extends Property {\n  o TypeIdentifier type\n}\n\nconcept ObjectProperty extends Property {\n  o String defaultValue optional\n  o TypeIdentifier type\n}\n\nconcept BooleanProperty extends Property {\n  o Boolean defaultValue optional\n}\n\nconcept DateTimeProperty extends Property {\n}\n\nconcept StringProperty extends Property {\n  o String defaultValue optional\n  o StringRegexValidator validator optional\n  o StringLengthValidator lengthValidator optional\n}\n\nconcept StringRegexValidator {\n  o String pattern\n  o String flags\n}\n\nconcept StringLengthValidator {\n  o Integer minLength optional\n  o Integer maxLength optional\n}\n\nconcept DoubleProperty extends Property {\n  o Double defaultValue optional\n  o DoubleDomainValidator validator optional\n}\n\nconcept DoubleDomainValidator {\n  o Double lower optional\n  o Double upper optional\n}\n\nconcept IntegerProperty extends Property {\n  o Integer defaultValue optional\n  o IntegerDomainValidator validator optional\n}\n\nconcept IntegerDomainValidator {\n  o Integer lower optional\n  o Integer upper optional\n}\n\nconcept LongProperty extends Property {\n  o Long defaultValue optional\n  o LongDomainValidator validator optional\n}\n\nconcept LongDomainValidator {\n  o Long lower optional\n  o Long upper optional\n}\n\nabstract concept Import {\n  o String namespace\n  o String uri optional\n}\n\nconcept ImportAll extends Import {\n}\n\nconcept ImportType extends Import {\n  o String name\n}\n\nconcept ImportTypes extends Import {\n  o String[] types\n}\n\nconcept Model {\n  o String namespace\n  o String sourceUri optional\n  o String concertoVersion optional\n  o Import[] imports optional\n  o Declaration[] declarations optional\n  o Decorator[] decorators optional\n}\n\nconcept Models {\n  o Model[] models\n}\n\nabstract concept ScalarDeclaration extends Declaration {\n}\n\nconcept BooleanScalar extends ScalarDeclaration {\n  o Boolean defaultValue\n}\n\nconcept IntegerScalar extends ScalarDeclaration {\n  o Integer defaultValue optional\n  o IntegerDomainValidator validator optional\n}\n\nconcept LongScalar extends ScalarDeclaration {\n  o Long defaultValue optional\n  o LongDomainValidator validator optional\n}\n\nconcept DoubleScalar extends ScalarDeclaration {\n  o Double defaultValue optional\n  o DoubleDomainValidator validator optional\n}\n\nconcept StringScalar extends ScalarDeclaration {\n  o String defaultValue optional\n  o StringRegexValidator validator optional\n  o StringLengthValidator lengthValidator optional\n}\n\nconcept DateTimeScalar extends ScalarDeclaration {\n  o String defaultValue optional\n}\n";

module.exports = metaModelCto;
